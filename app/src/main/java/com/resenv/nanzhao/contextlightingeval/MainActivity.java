package com.resenv.nanzhao.contextlightingeval;
import java.util.List;
import android.util.Log;

import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardBuilder;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.media.AudioManager;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.location.LocationManager;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p/>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 *
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class MainActivity extends Activity {

    //Nan added: include sensors
    private ContextManager mContextManager;
    //Nan added: end

    /**
     * {@link CardScrollView} to use as the main content view.
     */
    private CardScrollView mCardScroller;

    /**
     * "Hello World!" {@link View} generated by {@link #buildView()}.
     */
    private View mView;

    @Override
    protected void onCreate(Bundle bundle) {
            super.onCreate(bundle);

            mView = buildView();

            mCardScroller = new CardScrollView(this);
            mCardScroller.setAdapter(new CardScrollAdapter() {
                @Override
                public int getCount() {
                    return 1;
                }

                @Override
                public Object getItem(int position) {
                    return mView;
                }

                @Override
                public View getView(int position, View convertView, ViewGroup parent) {
                    return mView;
                }

                @Override
                public int getPosition(Object item) {
                    if (mView.equals(item)) {
                        return 0;
                    }
                    return AdapterView.INVALID_POSITION;
                }
            });
            // Handle the TAP event.
            mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
                @Override
                public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                    // Plays disallowed sound to indicate that TAP actions are not supported.
                    AudioManager am = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
                    am.playSoundEffect(Sounds.DISALLOWED);
                }
            });
            setContentView(mCardScroller);

            //Nan added: include sensors



            SensorManager mSensorManager =
                (SensorManager) getSystemService(Context.SENSOR_SERVICE);
            LocationManager mLocationManager =
                (LocationManager) getSystemService(Context.LOCATION_SERVICE);

            List<Sensor> list = mSensorManager.getSensorList(Sensor.TYPE_ALL);

            StringBuilder data = new StringBuilder();
                for(Sensor sensor: list){
                data.append(sensor.getName() + "\n");
                data.append(sensor.getVendor() + "\n");
                data.append(sensor.getVersion() + "\n");
            }
            Log.i("nan", data.toString());


            mContextManager = new ContextManager(mSensorManager, mLocationManager);
            mContextManager.start();
            //Nan added: end
    }


    @Override
    protected void onResume() {
        super.onResume();
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        mCardScroller.deactivate();
        super.onPause();
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link CardBuilder} class.
     */
    private View buildView() {
        CardBuilder card = new CardBuilder(this, CardBuilder.Layout.TEXT);
        Log.i("nan", "hallo");
        card.setText(R.string.hello_world);
        return card.getView();
    }

}
